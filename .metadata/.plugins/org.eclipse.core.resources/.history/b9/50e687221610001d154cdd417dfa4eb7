package net.codejava.config;

import java.util.Map;
import java.util.Properties;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableJpaRepositories(basePackages = { "net.codejava.customer" })
@EnableTransactionManagement
public class JpaConfig {

	@Bean
	public LocalContainerEntityManagerFactoryBean emf(){
		
		Map<String, ?> properties = new Map<String, ?>();
	    properties.put("javax.persistence.jdbc.driver", dbDriverClassName);
	    properties.put("javax.persistence.jdbc.url", dbConnectionURL);
	    properties.put("javax.persistence.jdbc.user", dbUser); //if needed

	    LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
	   // emf.setPersistenceProviderClass(org.eclipse.persistence.jpa.PersistenceProvider.class); //If your using eclipse or change it to whatever you're using
	    emf.setPackagesToScan("com.yourpkg"); //The packages to search for Entities, line required to avoid looking into the persistence.xml
	    emf.setPersistenceUnitName("");
	    emf.setJpaPropertyMap(properties);
	    emf.setLoadTimeWeaver(new ReflectiveLoadTimeWeaver()); //required unless you know what your doing
	    return emf;
	}
}
